@page "/monitores/edit/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService swal

<h3>Editar Monitor</h3>

@if (monitores is null)
{
    <p>Cargando...</p>
}
else
{
    <MonitoresForm @ref="monitoresForm" monitores="monitores" OnValidSubmit="Edit" ReturnAction="Return" />
    <Pagination CurrentPage="currentPage"
                TotalPages="totalPages"
                SelectedPage="SelectedPage" />
}

@code {
    private Monitores? monitores;
    private MonitoresForm? monitoresForm;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<Monitores>($"api/monitores/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("monitores");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessage();
                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            monitores = responseHTTP.Response;
        }
    }
    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }
    private async Task LoadAsync(int page = 1)
    {

        var responseHTTP = await repository.Get<Monitores>($"api/monitores/{Id}");
        monitores = responseHTTP.Response;



    }

    private async Task Edit()
    {
        var responseHTTP = await repository.Put("api/monitores", monitores);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            monitoresForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo("monitores");
        }
    }

    private void Return()
    {
        navigationManager.NavigateTo("monitores");
    }
}
