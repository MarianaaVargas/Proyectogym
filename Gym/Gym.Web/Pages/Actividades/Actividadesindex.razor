@page "/actividades"
@using Gym.WEB.Repositories
@using Gym.Shared.Entidades

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal



<h3>Actividades</h3>

<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />


<div class="mb-3">
    <a class="btn btn-primary" href="/actividades/create">Nueva actividad</a>

</div>

<GenericList MyList="actividades">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Actividades</th>
                    <th style="width:220px">Estados / Departamentos</th>
                    <th style="width:280px"></th>


                </tr>
            </thead>
            <tbody>
                @foreach (var Actividades in actividades!)
                {
                    <tr>
                        <td>
                            @Actividades.Nombre
                        </td>
                        <td>
                            <a href="/actividades/edit/@Actividades.Id_Actividad" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => Delete(Actividades))>Borrar</button>

                        
                        </td>

                    </tr>
                }
            </tbody>
        </table>

    </Body>

</GenericList>

@code {
    public List<Actividades>? actividades { get; set; }
    private int currentPage = 1;
    private int totalPages;

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
        
    }
    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }


    private async Task LoadAsync(int page=1)
    {
        
        string url1 = $"api/actividades?page={page}";
        string url2 = $"api/actividades/totalPages";

        var responseHppt = await repository.Get<List<Actividades>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        actividades = responseHppt.Response!;
        totalPages = responseHppt2.Response!;

    }

    private async Task Delete(Actividades actividades)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/actividades/{actividades.Id_Actividad}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessage();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await LoadAsync();
        }
    }
}

}


